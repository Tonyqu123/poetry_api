openapi: 3.0.0
servers:
  - description: Poetry API Auto Mocking
    url: 'http://poetry-api.dev.8slan.com'
info:
  version: 1.0.0
  title: Poetry api
  description: 'Poetry api协议, 分页协议参考https://docs.gitlab.com/ee/api/#pagination-link-header'
paths:
  /ac/analyzeSonar:
    parameters:
      - name: repoId
        in: query
        schema:
          type: string
        description: 收集指定repo的sonar质量报告
    post:
      security:
        - ApiOrgTokenAuth: []
      tags:
        - AnalysisCenter
      summary: 发送分析sonar指令
      responses:
        '200':
          description: 成功获取
          content:
            text/plain:
              schema:
                type: string
  /ac/buildDetails/search:
    parameters:
      - name: reportId
        in: query
        description: report Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出CI耗时详情
      responses:
        '200':
          description: 报告详情
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuildDetail'
  /ac/codeCoverage/collect:
    post:
      security:
        - ApiOrgTokenAuth: []
      tags:
        - AnalysisCenter
      summary: 收集覆盖率报告
      requestBody:
        description: 覆盖率报告以及其他信息
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                projectPath:
                  type: string
                namespace:
                  type: string
                coverage:
                  type: string
                  format: binary
                langauge:
                  type: string
                  enum:
                    - java
                commitHash:
                  type: string
      responses:
        '200':
          description: 分析成功
          content:
            text/plain:
              schema:
                type: string
  /ac/codeCoverageDetails/search:
    parameters:
      - name: codeCoverageId
        in: query
        description: CodeCoverage的ID
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出覆盖率报告的详情
      responses:
        '200':
          description: 覆盖率详情
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeCoverageDetail'
  '/ac/codehosts/{id}/removeRepos':
    parameters:
      - name: id
        in: path
        description: codehost id
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 删除codehost下的所有代码库
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  '/ac/codehosts/{id}/syncRepos':
    parameters:
      - name: id
        in: path
        description: codehost id
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 同步某个codehost的代码库
      responses:
        '200':
          description: 发送同步命令成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /ac/issueMeasures/search:
    parameters:
      - name: reportId
        in: query
        description: report id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出缺陷报告详情
      responses:
        '200':
          description: 缺陷报告详情
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueMeasure'
  /ac/measures/byOrg:
    parameters:
      - name: orgId
        in: query
        description: 组织Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出组织所有团队的质效列表
      responses:
        '200':
          description: 团队质效列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMeasure'
  /ac/measures/byTeam:
    parameters:
      - name: teamId
        in: query
        description: 团队Id
        required: true
        schema:
          type: integer
    get:
      summary: 列出团队的代码库质效
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      responses:
        '200':
          description: 代码库质效列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoMeasure'
  /ac/measuresHistory/byOrg:
    parameters:
      - in: query
        name: orgId
        description: 组织Id
        required: true
        schema:
          type: integer
      - in: query
        name: startTime
        description: 开始时间
        schema:
          type: string
      - in: query
        name: endTime
        description: 结束时间
        schema:
          type: string
    get:
      summary: 列出组织质效历史记录
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      responses:
        '200':
          description: 组织质效历史列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
  /ac/measuresHistory/byRepo:
    parameters:
      - in: query
        name: repoId
        description: 代码库Id
        required: true
        schema:
          type: integer
      - in: query
        name: startTime
        description: 开始时间
        schema:
          type: string
      - in: query
        name: endTime
        description: 结束时间
        schema:
          type: string
    get:
      summary: 列出代码库质效历史纪录
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      responses:
        '200':
          description: 代码库质效历史列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
  /ac/measuresHistory/byTeam:
    parameters:
      - in: query
        name: teamId
        description: 团队Id
        required: true
        schema:
          type: integer
      - in: query
        name: startTime
        description: 开始时间
        schema:
          type: string
      - in: query
        name: endTime
        description: 结束时间
        schema:
          type: string
    get:
      summary: 列出团队质效历史纪录
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      responses:
        '200':
          description: 团队质效历史列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
  /ac/qualityGates/query:
    post:
      security:
        - ApiOrgTokenAuth: []
      tags:
        - AnalysisCenter
      summary: 获取repository设置(用于CI脚本)
      requestBody:
        description: repository信息
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                projectPath:
                  type: string
                namespace:
                  type: string
                branch:
                  type: string
      responses:
        '200':
          description: |-
            成功获取sample:coverageCheck=false/true
            sonarSettings=xxxx
            repoId=1
          content:
            text/plain:
              schema:
                type: string
  /ac/qualityGates/update:
    parameters:
      - name: teamId
        in: query
        description: team id
        schema:
          type: integer
      - name: repoId
        in: query
        description: repo id
        schema:
          type: integer
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 更新团队/Repo质量门设置
      requestBody:
        description: 质量门设置
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualityGate'
      responses:
        '200':
          description: 更新结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /ac/repositories/search:
    parameters:
      - name: orgId
        in: query
        description: org id
        required: false
        schema:
          type: integer
      - name: teamId
        in: query
        description: team id
        required: false
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出该组织/团队的所有Repo
      responses:
        '200':
          description: 所有Repo详情
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
  '/ac/securityMeasureCount/{reportId}':
    parameters:
      - name: reportId
        in: path
        description: report id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出某代码库的安全扫描个数列表
      responses:
        '200':
          description: 安全扫描个数
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecurityMeasureCount'
  /ac/securityMeasureDetails/search:
    parameters:
      - name: reportId
        in: query
        description: report Id
        required: true
        schema:
          type: integer
      - name: categorySlug
        in: query
        description: category slug
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 列出安全扫描报告详情
      responses:
        '200':
          description: 报告详情
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecurityMeasureDetail'
  '/ac/team/{teamId}/modifyRepositories':
    parameters:
      - name: teamId
        in: path
        description: team id
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 向team添加Repo/从Team删除Repo
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ModifyRepositoryAction'
      responses:
        '200':
          description: 更新结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  '/ac/team/{teamId}/removeRepos':
    parameters:
      - name: teamId
        in: path
        description: team id
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 将team下的所有repo移出该team
      responses:
        '200':
          description: 移除结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /ac/teamQualityGates/search:
    parameters:
      - name: teamId
        in: query
        description: team id
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - AnalysisCenter
      summary: 获取团队质量门设置
      responses:
        '200':
          description: 团队质量门设置
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamQualityGate'
  /directory/ad:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 创建一个新的AD配置
      requestBody:
        description: AD配置参数
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ad'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
  /directory/ad/default:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 获取企业的AD配置
      responses:
        '200':
          description: AD配置
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
    put:
      tags:
        - Directory
      summary: 更新企业的AD配置
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      requestBody:
        description: AD配置参数
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ad'
      responses:
        '200':
          description: Ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
    delete:
      tags:
        - Directory
      summary: 删除企业的AD配置
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      responses:
        '200':
          description: 删除成功
  /directory/ads/sync:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: '测试AD设置,根据用户输入的用户名拉取域内的所有成员'
      responses:
        '200':
          description: 测试结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        '400':
          description: |
            错误码(resultCode):
            10002:AD connect failed
            400:username or password error
            10004:query AD user failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /directory/ads/test:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: '测试AD设置,发送联通测试和用户名密码验证'
      responses:
        '200':
          description: 测试结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        '400':
          description: |
            错误码(resultCode):
            10002:AD connect failed
            400:username or password error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /directory/check:
    get:
      summary: 检查系统是否初始化成功（是否有至少一个组织）
      tags:
        - Directory
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  inited:
                    type: boolean
                    description: 系统是否已初始化
  /directory/codehosts:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 创建一个新的codehost
      requestBody:
        description: codehost 参数
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Codehost'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codehost'
  '/directory/codehosts/{id}':
    parameters:
      - name: id
        in: path
        description: codehost Id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Directory
      summary: 列出codehost详情
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      responses:
        '200':
          description: codehost详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codehost'
    delete:
      tags:
        - Directory
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      summary: 删除codehost
      responses:
        '200':
          description: 删除成功k
    put:
      tags:
        - Directory
      summary: 更新codehost
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      requestBody:
        description: codehost 参数
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Codehost'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codehost'
  /directory/codehosts/callback:
    parameters:
      - name: state
        in: query
        description: 回调参数
        required: true
        schema:
          type: string
      - name: code
        in: query
        description: oauth2 code
        required: true
        schema:
          type: string
    get:
      tags:
        - Directory
      summary: codehost授权回调
      responses:
        '302':
          description: 授权成功
        '400':
          description: '授权失败, 返回失败原因. 10006:用户拒绝了授权, 10007:appid或者secret不正确，授权失败'
          content:
            text/html:
              schema:
                type: string
  '/directory/codehostss/{id}/auth':
    parameters:
      - name: id
        in: path
        description: codehost Id
        required: true
        schema:
          type: integer
      - name: redirect
        in: query
        description: 授权完成后回跳地址
        required: true
        schema:
          type: string
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 跳转到指定codehost进行授权，授权完成后回跳到redirect地址，如成功，则传succeed=true，如失败，传errCode=someCode，errMessage=someMessage（优先使用errCode，无code用errMessage，无errMessage则界面显示未知错误）
      responses:
        '302':
          description: 跳转
  /directory/codehostss/search:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: 分页大小
        schema:
          type: integer
      - name: page
        in: query
        description: 分页index
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 列出组织所有的codehost
      responses:
        '200':
          description: codehost列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Codehost'
  /directory/organization:
    post:
      tags:
        - Directory
      summary: 创建一个新的组织
      requestBody:
        description: 组织注册信息
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                website:
                  type: string
                adminName:
                  type: string
                adminEmail:
                  type: string
                adminPhone:
                  type: string
                adminPassword:
                  type: string
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: admin userToken
                  organization:
                    $ref: '#/components/schemas/Organization'
  '/directory/organization/{orgId}':
    parameters:
      - name: orgId
        in: path
        description: 组织ID
        required: true
        schema:
          type: integer
    get:
      tags:
        - Directory
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      summary: 获取一个组织信息
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      tags:
        - Directory
      summary: 更新组织信息
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      requestBody:
        description: 组织信息
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                website:
                  type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /directory/organizations/findByOrgToken:
    parameters:
      - name: orgToken
        in: query
        description: 组织Token
        required: true
        schema:
          type: string
    get:
      tags:
        - Directory
      summary: 用组织Token寻找企业信息
      responses:
        '200':
          description: 查找成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: 查找失败
  /directory/organizations/list:
    get:
      tags:
        - Directory
      security:
        - ApiRootKeyAuth: []
      summary: 列出所有组织信息
      responses:
        '200':
          description: 所有组织信息
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /directory/orgToken:
    put:
      summary: 更新组织Token
      tags:
        - Directory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                originOrgToken:
                  type: string
                  description: 原来的组织Token
      responses:
        '200':
          description: 查找成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: 查找失败
  /directory/team:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 创建一个新的team
      requestBody:
        description: team参数
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  '/directory/teams/{teamId}':
    parameters:
      - name: teamId
        in: path
        description: teamId
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 获取team详情
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 更新team
      requestBody:
        description: team参数
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 删除team
      responses:
        '200':
          description: 删除成功
  '/directory/teams/{teamId}/members/batch':
    parameters:
      - name: teamId
        in: path
        description: 团队ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 更新团队成员
      requestBody:
        description: 更新团队成员数据
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MemberAction'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /directory/teamss/search:
    parameters:
      - name: orgId
        in: query
        description: org Id
        required: true
        schema:
          type: integer
      - name: keyword
        in: query
        description: keyword
        schema:
          type: string
      - name: per_page
        in: query
        description: 分页大小
        schema:
          type: integer
      - name: page
        in: query
        description: 分页index
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 获取team列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  '/directory/user/{userId}':
    parameters:
      - name: userId
        in: path
        description: user ID
        required: true
        schema:
          type: integer
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 删除user
      responses:
        '200':
          description: 删除成功
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - Directory
      summary: 更新user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /directory/user/detail:
    get:
      tags:
        - Directory
      security:
        - ApiKeyAuth: []
      summary: 获取user详情
      responses:
        '200':
          description: user详情
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    $ref: '#/components/schemas/User'
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                          description: 团队名称
                        isTeamLeader:
                          type: boolean
                  organization:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                        description: 组织名称
                      isAdmin:
                        type: boolean
  /directory/user/login:
    parameters:
      - name: orgId
        in: query
        description: '组织ID, 如果为空, 则只限管理员登录'
        required: false
        schema:
          type: integer
    post:
      tags:
        - Directory
      summary: 用户登录
      requestBody:
        description: 'email,密码'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: admin userToken
                  user:
                    $ref: '#/components/schemas/User'
                  org:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
        '400':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        '500':
          description: 服务不可用
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /directory/user/logout:
    post:
      tags:
        - Directory
      summary: 退出登录（该接口由proxy实现，清除用户的客户端cookie）
      responses:
        '200':
          description: 成功
  /directory/userss/search:
    parameters:
      - name: orgId
        in: query
        description: 组织ID
        schema:
          type: integer
      - name: teamId
        in: query
        description: team ID
        schema:
          type: integer
      - name: excludeTeamId
        in: query
        description: '排除在指定team(id={excludeTeamId})里面的user'
        schema:
          type: integer
      - name: per_page
        in: query
        description: 分页大小
        schema:
          type: integer
      - name: page
        in: query
        description: 分页index
        schema:
          type: integer
      - name: keyword
        in: query
        description: keyword
        schema:
          type: string
    get:
      tags:
        - Directory
      summary: '列出某组织/团队的成员, orgId和teamId必须有一个'
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /pm/artifacts:
    parameters:
      - name: serviceId
        in: query
        description: 服务ID
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      summary: 服务的应用包列表(支持分页)
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactListResponse'
          headers:
            X-Total:
              $ref: '#/components/headers/X-Total'
  /pm/buildTools:
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 构建工具列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildToolListResponse'
  /pm/caps:
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 运算能力列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapListResponse'
  /pm/envs:
    parameters:
      - name: productId
        in: query
        description: 产品ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 添加产品环境
      requestBody:
        description: 添加产品环境请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Env'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Env'
  '/pm/envs/{envId}':
    parameters:
      - name: envId
        in: path
        description: 环境ID
        required: true
        schema:
          type: integer
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新产品环境
      requestBody:
        description: 更新产品环境请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Env'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 删除产品环境
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  '/pm/envs/{envId}/renderConf':
    parameters:
      - name: envId
        in: path
        description: 环境ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 批量渲染服务配置
      responses:
        '200':
          description: '渲染成功,tar.gz包,包含该环境下所有完成渲染的配置文件'
          headers:
            Content-Disposition:
              schema:
                type: string
              description: '文件名 ex: attachment; filename="filename.tar.gz"'
            Content-Type:
              schema:
                type: string
              description: application/tar+gzip
        '400':
          description: 渲染失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/envVars:
    parameters:
      - name: envId
        in: query
        description: 环境ID
        required: true
        schema:
          type: string
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: '全量更新环境变量, 覆盖默认值'
      requestBody:
        description: 更新环境变量请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvVarBatchUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/jobs:
    parameters:
      - name: productId
        in: query
        description: 产品Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取任务列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 新建任务
      requestBody:
        description: 添加任务请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpsertRequest'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  '/pm/jobs/{jobId}':
    parameters:
      - name: jobId
        in: path
        description: 任务Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取任务详情
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新任务
      requestBody:
        description: 更新任务请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpsertRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 删除任务
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/pipelines:
    parameters:
      - name: productId
        in: query
        description: 产品Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取工作流列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineListResponse'
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 创建工作流
      requestBody:
        description: 添加产品请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineUpsertRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
  '/pm/pipelines/{pipeLineId}':
    parameters:
      - name: pipeLineId
        in: path
        description: 工作流Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取工作流
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新工作流
      requestBody:
        description: 更新工作流请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineUpsertRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 删除工作流
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/products:
    parameters:
      - name: orgId
        in: query
        description: org Id
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取产品列表
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 新建产品
      requestBody:
        description: 添加产品请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpsertRequest'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  '/pm/products/{productId}':
    parameters:
      - name: productId
        in: path
        description: 产品ID
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 获取产品详情
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新产品
      requestBody:
        description: 产品参数
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpsertRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 删除产品
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/productVars:
    parameters:
      - name: productId
        in: query
        description: 产品ID
        required: true
        schema:
          type: integer
    put:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新产品环境变量(全量)
      requestBody:
        description: 添加产品环境变量请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVarBatchUpdateRequest'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /pm/serviceConfs:
    parameters:
      - name: serviceId
        in: query
        description: 服务ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 添加服务配置
      requestBody:
        description: 添加服务配置请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceConfUpsertRequest'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceConf'
  '/pm/serviceConfs/{confId}':
    parameters:
      - name: confId
        in: path
        description: 服务配置ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 更新服务配置
      requestBody:
        description: 更新服务配置请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceConfUpsertRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 删除服务配置
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  '/pm/serviceConfs/{confId}/renderConf':
    parameters:
      - name: confId
        in: path
        description: 服务配置ID
        required: true
        schema:
          type: integer
      - name: envId
        in: query
        description: 环境ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 渲染服务配置
      responses:
        '200':
          description: 配置结果
          headers:
            Content-Disposition:
              schema:
                type: string
              description: '文件名 ex: attachment; filename="filename.conf"'
  '/pm/serviceConfs/{confId}/revisions':
    parameters:
      - name: confId
        in: path
        description: 服务配置ID
        required: true
        schema:
          type: integer
    get:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      summary: 服务配置历史纪录(支持分页)
      responses:
        '200':
          description: 服务配置历史记录列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceConfRevisionListResponse'
          headers:
            X-Total:
              $ref: '#/components/headers/X-Total'
  /pm/services:
    parameters:
      - name: productId
        in: query
        description: 产品ID
        required: true
        schema:
          type: integer
    post:
      security:
        - ApiKeyAuth: []
        - ApiRootKeyAuth: []
      tags:
        - ProductManager
      summary: 添加服务
      requestBody:
        description: 添加服务请求
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreateRequest'
      responses:
        '200':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
components:
  schemas:
    ActionResult:
      type: object
      properties:
        resultCode:
          type: integer
          description: '0 is good, other is bad'
        errorMsg:
          type: string
    Ad:
      type: object
      properties:
        id:
          type: integer
          description: 在请求体中无效
        type:
          type: string
          enum:
            - ad
            - ldap
        address:
          type: string
        port:
          type: integer
        username:
          type: string
        password:
          type: string
          description: 在响应体隐藏
        dn:
          type: string
    Artifact:
      type: object
      properties:
        id:
          type: integer
          description: 应用包ID
        name:
          type: string
          description: 名称
        created:
          type: string
          description: 生成日期
        link:
          type: string
          description: 应用包地址
        type:
          type: string
          enum:
            - image
            - object
          description: image为镜像，object为压缩文件
    ArtifactListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Artifact'
    BuildDetail:
      type: object
      properties:
        link:
          type: string
        succeed:
          type: boolean
        duration:
          type: integer
        time:
          type: string
        id:
          type: integer
    BuildReport:
      type: object
      properties:
        noBuild:
          type: integer
        noBuildSucceed:
          type: integer
        duration:
          type: integer
        time:
          type: string
        id:
          type: integer
    BuildTool:
      type: object
      description: 构建工具列表
      properties:
        name:
          type: string
          description: '工具名称如 golang:1.11'
        desc:
          type: string
          description: 工具描述
        os:
          type: string
          description: '操作系统如 ubuntu:14.04'
    BuildToolListResponse:
      type: array
      items:
        $ref: '#/components/schemas/BuildTool'
    Cap:
      type: object
      description: 运算能力
      properties:
        name:
          type: string
          enum:
            - high
            - median
            - low
        desc:
          type: string
          description: 'CPU和内存配置, 如 high: 4 Core 8G Memory, medium: 2 Core 4G Memory, low: 1Core 2G Memory'
    CapListResponse:
      type: array
      description: 运算能力列表
      items:
        $ref: '#/components/schemas/Cap'
    CodeCoverage:
      type: object
      properties:
        noStmt:
          type: integer
        noMissedStmt:
          type: integer
        noLine:
          type: integer
        noMissedLine:
          type: integer
        time:
          type: string
        id:
          type: integer
    CodeCoverageDetail:
      type: object
      properties:
        packageName:
          type: string
        noStmt:
          type: integer
        noMissedStmt:
          type: integer
    Codehost:
      type: object
      properties:
        id:
          type: integer
          description: 请求体中无效
        orgId:
          type: string
          description: 组织ID
        name:
          type: string
        type:
          type: string
          enum:
            - gitlab
        address:
          type: string
          description: gitlab地址
        ready:
          type: boolean
          description: 是否已经授权完毕
        accessToken:
          type: string
          description: 请求体中无效
        refreshToken:
          type: string
          description: 请求体中无效
        namespace:
          type: string
          description: 代码库的命名空间(对应gitlab里的user或者group)
        applicationId:
          type: string
        clientSecret:
          type: string
    Env:
      type: object
      properties:
        id:
          type: integer
          description: 环境唯一ID (在更新，添加方法的请求体中无效)
        name:
          type: string
          description: 环境名称
        desc:
          type: string
          description: 环境描述
    EnvVar:
      type: object
      description: 环境参数
      properties:
        key:
          type: string
          description: '变量名称 [a-z][a-z0-9A-Z_\-]+'
        value:
          type: string
          description: 值
        isDefault:
          type: boolean
          description: 是否默认值
    EnvVarBatchUpdateRequest:
      type: array
      items:
        type: object
        properties:
          key:
            type: string
            description: '变量名称 [a-z][a-z0-9A-Z_\-]+'
          value:
            type: string
            description: 值
    IssueMeasure:
      type: object
      properties:
        file:
          type: string
        line:
          type: integer
        description:
          type: string
    IssueReport:
      type: object
      properties:
        noIssue:
          type: integer
        time:
          type: string
        id:
          type: integer
    Job:
      type: object
      properties:
        id:
          type: integer
          description: 任务ID
        name:
          type: string
          description: 任务名称
        type:
          $ref: '#/components/schemas/JobType'
        services:
          type: array
          description: '任务类型为deploy时,最多只能有一个service'
          items:
            type: object
            properties:
              id:
                type: integer
                description: 服务ID
              name:
                type: string
                description: 服务名称
        timeout:
          type: integer
          description: 超时时间(秒)
        runtime:
          $ref: '#/components/schemas/JobRuntime'
        vars:
          $ref: '#/components/schemas/JobVars'
        buildConf:
          $ref: '#/components/schemas/JobBuildConf'
        deployConf:
          $ref: '#/components/schemas/JobDeployConf'
        testConf:
          $ref: '#/components/schemas/JobTestConf'
    JobBuildConf:
      type: object
      description: 构建任务配置
      properties:
        caches:
          type: array
          items:
            type: string
        scripts:
          description: 运行脚本
          type: array
          items:
            type: string
        cleanWorkspace:
          description: 设置是否清空工作目录
          type: boolean
        packaging:
          type: object
          description: |
            打包方式.
            如打包成压缩文件 apache-tomcat-8.5.38.tar.gz, 则name=apache-tomcat, versioning=custom, version=8.5.38, type=tar
            如打包成镜像 registry.example.com/foo/bar:20190101121100, 则name=foo/bar, versioning=timestamp, type=image
          properties:
            type:
              type: string
              enum:
                - image
                - zip
                - tar
              description: image表示打包成镜像，tar和zip表示打包成压缩文件
            name:
              type: string
              description: '打包名称前缀, 如 tomcat'
            versioning:
              type: string
              enum:
                - ref
                - timestamp
                - custom
              description: '包版本生成模式，ref表示依赖代码库的分支或者tag名称, custom为自定义版本号'
            version:
              type: string
              description: 自定义版本号
        repositories:
          type: array
          items:
            type: object
            description: 代码库
            properties:
              codehost:
                type: object
                properties:
                  id:
                    type: integer
                    description: 代码库ID
                  address:
                    type: string
                    description: 代码库地址
                  type:
                    type: string
                    enum:
                      - gitlab
                      - github
              namespace:
                type: string
                description: 命名空间 (user/group)
              name:
                type: string
                description: 代码库名称
              branch:
                type: string
                description: 分支名
              submodule:
                type: boolean
                description: 是否同步子模块
    JobDeployConf:
      type: object
      description: 部署配置
      properties:
        containerized:
          type: boolean
          description: 容器化部署
        scripts:
          description: 运行脚本 (仅当containerized=false时有效)
          type: array
          items:
            type: string
        k8sTemplates:
          description: k8syaml文件 (仅当containerized=true时有效)
          type: array
          items:
            type: string
        useLatestArtifact:
          type: boolean
          description: 使用最新的应用包
        artifact:
          $ref: '#/components/schemas/Artifact'
          description: 仅当useLatestArtifact=false时有效
    JobListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Job'
    JobRuntime:
      type: object
      properties:
        os:
          type: string
          description: '运行os，如 ubuntu:14.04, ubuntu:16.04, alpine:3.5'
        cap:
          type: string
          enum:
            - high
            - medium
            - low
    JobTestConf:
      type: object
      description: 测试任务配置
      properties:
        threshold:
          type: integer
          description: 测试通过率阈值
        reportTarget:
          type: string
          description: 测试结果上报地址
    JobType:
      type: string
      enum:
        - test
        - build
        - deploy
      description: 任务类型
    JobUpsertRequest:
      type: object
      description: 测试任务需要包含 buildConf和testConf
      properties:
        type:
          $ref: '#/components/schemas/JobType'
        services:
          type: array
          description: '任务类型为deploy时,最多只能有一个service'
          items:
            type: object
            properties:
              id:
                type: integer
                description: 服务ID
        timeout:
          type: integer
          description: 超时时间(秒)
        vars:
          $ref: '#/components/schemas/JobVars'
        buildConf:
          $ref: '#/components/schemas/JobBuildConf'
        deployConf:
          $ref: '#/components/schemas/JobDeployConf'
        testConf:
          $ref: '#/components/schemas/JobTestConf'
    JobVars:
      description: 自定义变量
      type: array
      items:
        type: object
        properties:
          key:
            type: string
            description: '变量名称 [a-z][a-z0-9A-Z_\-]+'
          value:
            type: string
            description: 值
          secured:
            type: boolean
            description: 是否敏感信息
    Measure:
      type: object
      properties:
        codeCoverage:
          $ref: '#/components/schemas/CodeCoverage'
        securityReport:
          $ref: '#/components/schemas/SecurityReport'
        issueReport:
          $ref: '#/components/schemas/IssueReport'
        buildReport:
          $ref: '#/components/schemas/BuildReport'
    MemberAction:
      type: object
      properties:
        id:
          type: integer
          description: user id
        action:
          type: string
          enum:
            - add
            - remove
            - update
        isTeamleader:
          type: boolean
    ModifyRepositoryAction:
      type: object
      properties:
        repositoryId:
          type: integer
        action:
          type: string
          enum:
            - add
            - remove
    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        website:
          type: string
        orgToken:
          type: string
    Pipeline:
      type: object
      properties:
        id:
          type: integer
          description: 工作流ID
        name:
          type: string
          description: 工作流名称
        desc:
          type: string
          description: 工作流描述
        env:
          $ref: '#/components/schemas/Env'
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
    PipelineListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Pipeline'
    PipelineUpsertRequest:
      type: object
      properties:
        name:
          type: string
          description: 工作流名称
        desc:
          type: string
          description: 工作流描述
        envId:
          type: integer
        stages:
          type: array
          items:
            $ref: '#/components/schemas/StageUpdate'
    Product:
      type: object
      properties:
        id:
          type: integer
          description: 产品唯一ID
        name:
          type: string
          description: 产品名称
        desc:
          type: string
          description: 产品描述
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamLite'
        publisher:
          type: array
          items:
            $ref: '#/components/schemas/UserLite'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        vars:
          type: array
          items:
            $ref: '#/components/schemas/ProductVar'
        envs:
          type: array
          items:
            $ref: '#/components/schemas/Env'
    ProductListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    ProductUpsertRequest:
      type: object
      properties:
        name:
          type: string
          description: 产品名称
        desc:
          type: string
          description: 产品描述
        teams:
          type: array
          items:
            type: integer
        publisher:
          type: array
          items:
            type: integer
    ProductVar:
      type: object
      description: '产品全局变量, 当secured=true时，defaultValue必须为null'
      properties:
        key:
          type: string
          description: '变量名称 [a-z][a-z0-9A-Z_\-]+'
        defaultValue:
          type: string
          description: 变量默认值
        secured:
          type: boolean
          description: 是否加密
    ProductVarBatchUpdateRequest:
      type: array
      description: 更新产品全局变量请求(全量)
      items:
        $ref: '#/components/schemas/ProductVar'
    QualityGate:
      type: object
      properties:
        codeScan:
          type: boolean
        shouldReport:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/QualityGateRule'
    QualityGateRule:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          enum:
            - CCT
            - CCBTL
        intValue:
          type: integer
    RepoMeasure:
      type: object
      properties:
        repo:
          $ref: '#/components/schemas/Repository'
        measures:
          $ref: '#/components/schemas/Measure'
    RepoQualityGate:
      type: object
      properties:
        detail:
          $ref: '#/components/schemas/QualityGate'
        repo:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
    Repository:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        namespace:
          type: string
        mainBranch:
          type: string
        branches:
          type: array
          items:
            type: string
        codehostId:
          type: integer
        url:
          type: string
        team:
          $ref: '#/components/schemas/Team'
        withStats:
          type: boolean
          description: 是否有CI数据
        ciBranch:
          type: string
          description: CI数据上报分支
        codehost:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
    SecurityMeasureCount:
      type: object
      properties:
        id:
          type: integer
        count:
          type: integer
        category:
          type: string
          enum:
            - owasp-a1
            - owasp-a2
            - owasp-a3
            - owasp-a4
            - owasp-a5
            - owasp-a6
            - owasp-a7
            - owasp-a8
            - owasp-a9
            - owasp-a10
    SecurityMeasureDetail:
      type: object
      properties:
        detail:
          type: object
          properties:
            line:
              type: integer
            file:
              type: string
            detail:
              type: string
        category:
          type: string
    SecurityReport:
      type: object
      properties:
        count:
          type: integer
        time:
          type: string
        id:
          type: integer
    Service:
      type: object
      properties:
        id:
          type: integer
          description: 服务ID
        name:
          type: string
          description: 服务名称
        containerized:
          type: boolean
          description: 是否容器化 (true = 容器化)
        confs:
          type: array
          items:
            $ref: '#/components/schemas/ServiceConf'
        latestArtifact:
          $ref: '#/components/schemas/Artifact'
    ServiceConf:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: 配置名称
        content:
          type: string
          description: 服务配置模板内容
        updated:
          type: string
          description: 更新时间
        revision:
          type: string
          description: 配置模板版本
    ServiceConfRevisionListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ServiceConf'
    ServiceConfUpsertRequest:
      type: object
      properties:
        name:
          type: string
          description: 配置名称
        content:
          type: string
          description: 服务配置模板内容
    ServiceCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: 服务名称
        containerized:
          type: boolean
          description: 是否容器化 (true = 容器化)
    Stage:
      type: object
      properties:
        name:
          type: string
          description: 步骤名称
        jobs:
          type: array
          description: 任务列表
          items:
            $ref: '#/components/schemas/Job'
    StageUpdate:
      type: object
      properties:
        name:
          type: string
          description: 步骤名称
        jobs:
          type: array
          description: 任务列表
          items:
            type: integer
    Team:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        leaders:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        desc:
          type: string
        orgId:
          type: integer
    TeamLite:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    TeamMeasure:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/Team'
        measures:
          $ref: '#/components/schemas/Measure'
    TeamQualityGate:
      type: object
      properties:
        detail:
          $ref: '#/components/schemas/QualityGate'
        repos:
          type: array
          items:
            $ref: '#/components/schemas/RepoQualityGate'
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        isAdmin:
          type: boolean
          description: 是否组织管理员
        isSuperUser:
          type: boolean
        isTeamLeader:
          type: boolean
          description: 仅当根据teamId搜索时有意义
        teams:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        lastLogin:
          type: integer
        directory:
          type: string
          description: 可以是 system 或者 AD的名称
    UserLite:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  parameters:
    page:
      name: page
      in: query
      description: 分页index
      schema:
        type: integer
    per_page:
      name: per_page
      in: query
      description: 分页大小
      schema:
        type: integer
  headers:
    X-Total:
      description: 总数
      schema:
        type: integer
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: '普通用户使用的API-KEY, [a-zA-Z0-9]{16}'
    ApiOrgTokenAuth:
      type: apiKey
      in: header
      name: X-ORG-TOKEN
      description: '企业TOKEN, [a-zA-Z0-9]{16}'
    ApiRootKeyAuth:
      type: apiKey
      in: header
      name: X-ROOT-API-KEY
      description: 'root权限使用的API-KEY, [a-zA-Z0-9]{16}'
